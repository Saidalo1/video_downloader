import os
import re
import logging
import tempfile
import asyncio
from typing import Optional, Dict, Tuple
from datetime import datetime, timedelta
from urllib.parse import urlparse, parse_qs

from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from telegram.constants import ChatAction
import undetected_chromedriver as uc
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import aiohttp
import aiofiles

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
TOKEN = "6031079365:AAGhNXxFXoKGdBo6ufvhzvJiCPEjLk0Twk0"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–µ–π
CACHE_DIR = "/app/cache"

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∫—ç—à–∞ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
os.makedirs(CACHE_DIR, exist_ok=True)

# –ö—ç—à –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∫–∞—á–∞–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ
# –°—Ç—Ä—É–∫—Ç—É—Ä–∞: {clip_id: (file_path, timestamp)}
video_cache: Dict[str, Tuple[str, datetime]] = {}

# –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫—ç—à–∞ (–≤ —á–∞—Å–∞—Ö)
CACHE_LIFETIME = 24

async def is_allstar_url(url: str) -> Optional[str]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ URL —Å—Å—ã–ª–∫–æ–π –Ω–∞ allstar.gg –∫–ª–∏–ø"""
    try:
        parsed_url = urlparse(url)
        if 'allstar.gg' in parsed_url.netloc and 'clip' in parsed_url.path:
            clip_id = parse_qs(parsed_url.query).get('clip', [None])[0]
            if clip_id:
                return clip_id
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ URL: {e}")
    return None

async def extract_allstar_urls(text: str) -> list[str]:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Å–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ allstar.gg –∫–ª–∏–ø—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞
    
    Args:
        text (str): –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        
    Returns:
        list[str]: –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
    """
    # –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ URL
    url_pattern = r'https?://(?:www\.)?allstar\.gg/clip\?clip=[a-zA-Z0-9]+'
    urls = re.findall(url_pattern, text)
    return urls

async def get_video_url(url: str) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç URL –≤–∏–¥–µ–æ —Å –ø–æ–º–æ—â—å—é Selenium"""
    options = uc.ChromeOptions()
    options.add_argument('--headless')
    options.add_argument('--no-sandbox')
    options.add_argument('--disable-dev-shm-usage')
    
    driver = None
    try:
        driver = uc.Chrome(options=options)
        driver.get(url)
        
        wait = WebDriverWait(driver, 20)
        video_element = wait.until(
            EC.presence_of_element_located((By.TAG_NAME, "video"))
        )
        
        video_url = video_element.get_attribute('src')
        if not video_url:
            source_elements = video_element.find_elements(By.TAG_NAME, "source")
            if source_elements:
                video_url = source_elements[0].get_attribute('src')
        
        if not video_url:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ URL –≤–∏–¥–µ–æ")
            
        return video_url
    
    finally:
        if driver:
            driver.quit()

async def download_video(video_url: str, output_path: str):
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –≤–∏–¥–µ–æ –ø–æ URL"""
    async with aiohttp.ClientSession() as session:
        async with session.get(video_url) as response:
            if response.status == 200:
                async with aiofiles.open(output_path, mode='wb') as f:
                    await f.write(await response.read())
            else:
                raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏: {response.status}")

async def clean_old_cache():
    """–û—á–∏—â–∞–µ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ —Ñ–∞–π–ª—ã –∏–∑ –∫—ç—à–∞"""
    current_time = datetime.now()
    expired_clips = []
    
    for clip_id, (file_path, timestamp) in video_cache.items():
        if current_time - timestamp > timedelta(hours=CACHE_LIFETIME):
            try:
                if os.path.exists(file_path):
                    os.remove(file_path)
                expired_clips.append(clip_id)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file_path}: {e}")
    
    for clip_id in expired_clips:
        del video_cache[clip_id]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–ª–∏–ø —Å allstar.gg, –∏ —è —Å–∫–∞—á–∞—é –µ–≥–æ –¥–ª—è —Ç–µ–±—è."
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    await update.message.reply_text(
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–ª–∏–ø —Å allstar.gg –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "https://allstar.gg/clip?clip=ID_–ö–õ–ò–ü–ê\n"
        "–ò —è —Å–∫–∞—á–∞—é –µ–≥–æ –¥–ª—è —Ç–µ–±—è!"
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    message = update.message
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç
    if not message or not message.text:
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ —Å—Å—ã–ª–∫–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    urls = await extract_allstar_urls(message.text)
    if not urls:
        return
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        status_message = await message.reply_text(
            f"üéÆ –ù–∞–π–¥–µ–Ω–æ {len(urls)} —Å—Å—ã–ª–æ–∫ –Ω–∞ –∫–ª–∏–ø—ã!\n"
            "‚è≥ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É..."
        )
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å—Å—ã–ª–∫—É
        for i, url in enumerate(urls, 1):
            try:
                clip_id = await is_allstar_url(url)
                if not clip_id:
                    continue
                
                await status_message.edit_text(
                    f"üéÆ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–ø–∞ {i}/{len(urls)}\n"
                    "‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."
                )
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
                if clip_id in video_cache:
                    file_path, _ = video_cache[clip_id]
                    if os.path.exists(file_path):
                        await message.reply_video(
                            video=open(file_path, 'rb'),
                            caption=f"–í–∏–¥–µ–æ {i} –∏–∑ –∫—ç—à–∞ ‚ö°Ô∏è"
                        )
                        continue
                
                # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∏–¥–µ–æ
                cache_file = os.path.join(CACHE_DIR, f"{clip_id}.mp4")
                
                # –ü–æ–ª—É—á–∞–µ–º URL –≤–∏–¥–µ–æ
                video_url = await get_video_url(url)
                
                # –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ
                await message.chat.send_action(ChatAction.UPLOAD_VIDEO)
                await download_video(video_url, cache_file)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ
                await message.reply_video(
                    video=open(cache_file, 'rb'),
                    caption=f"–í–æ—Ç –≤–∞—à–µ –≤–∏–¥–µ–æ {i}! üéÆ"
                )
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
                video_cache[clip_id] = (cache_file, datetime.now())
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–ª–∏–ø–∞ {url}: {e}")
                await message.reply_text(
                    f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–ª–∏–ø–∞ {i}.\n"
                    "üîÑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Å—Å—ã–ª–∫–∏."
                )
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await status_message.delete()
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–π –∫—ç—à
        await clean_old_cache()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        error_text = (
            "‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.\n"
            "üîÑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Å—Å—ã–ª–æ–∫."
        )
        if 'status_message' in locals():
            await status_message.edit_text(error_text)
        else:
            await message.reply_text(error_text)

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –°–æ–∑–¥–∞—ë–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∏—Å–∫–ª—é—á–∞—è –∫–æ–º–∞–Ω–¥—ã
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling(allowed_updates=Update.ALL_TYPES)

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"Update {update} caused error: {context.error}")
    
    if update and update.effective_message:
        error_message = (
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.\n"
            "üîÑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö."
        )
        await update.effective_message.reply_text(error_message)

if __name__ == '__main__':
    main()
